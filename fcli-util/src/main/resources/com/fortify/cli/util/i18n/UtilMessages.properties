# Make sure none of the commands inherit usage header or description of the top-level fcli command
# Note that we define these as usage.* whereas our parent bundle defines fcli.usage.* (with fcli prefix).
# For some reason, overriding fcli.usage.* doesn't work.
usage.header = 
usage.description = 

# fcli util
# TODO Provide more details in usage description, after deciding whether the license-related
# commands should stay in this module, or moved to a new, separate module.
fcli.util.usage.header = Utility commands that don't fit in any of the other modules.
fcli.util.usage.description = This module provides various utility commands that don't fit in any of the other fcli modules. 

# fcli util all-commands
fcli.util.all-commands.usage.header = List and display help information for all fcli commands.
fcli.util.all-commands.list.usage.header = List (a subset of) all fcli commands.
fcli.util.all-commands.list.usage.description = By default, this command outputs a table listing all available fcli commands. The --query option can be used to output a subset of commands.
fcli.util.all-commands.list.query.0 = Only display records for which the given Spring Expression Language (SpEL) expression returns true. See the output of '-o json-properties' for the list of properties that you can query on. Common queries include the following:
fcli.util.all-commands.list.query.1 = -q '!hidden' (only non-hidden commands)
fcli.util.all-commands.list.query.2 = -q 'hidden' (only hidden commands)
fcli.util.all-commands.list.query.3 = -q '!runnable' (only container commands)
fcli.util.all-commands.list.query.4 = -q 'runnable' (only runnable commands)
fcli.util.all-commands.list.query.5 = -q '!hidden && runnable' (only non-hidden, runnable commands)
fcli.util.all-commands.list.query.6 = -q 'module=="config"' (only 'config' commands)
fcli.util.all-commands.usage.usage.header = Display usage information for (a subset of) all fcli commands.
fcli.util.all-commands.usage.usage.description = By default, this command outputs the usage information for every individual fcli command, similar to manually invoking each command with the --help option. The --query option can be used to only display usage information for a subset of commands.
fcli.util.all-commands.usage.query.0 = Only display usage information for commands that match the given Spring Expression Language (SpEL) expression. See the output of 'fcli util all-commands list -o json-properties' for the list of properties that you can query on. Common queries include the following: 
fcli.util.all-commands.usage.query.1 = -q '!hidden' (only non-hidden commands)
fcli.util.all-commands.usage.query.2 = -q 'hidden' (only hidden commands)
fcli.util.all-commands.usage.query.3 = -q '!runnable' (only container commands)
fcli.util.all-commands.usage.query.4 = -q 'runnable' (only runnable commands)
fcli.util.all-commands.usage.query.5 = -q '!hidden && runnable' (only non-hidden, runnable commands)
fcli.util.all-commands.usage.query.6 = -q 'module=="config"' (only 'config' commands)

# fcli util auto-complete
fcli.util.auto-complete.usage.header = Manage fcli auto-completion scripts.
fcli.util.auto-complete.generate.usage.header = Generate fcli auto-completion script.
fcli.util.auto-complete.generate.usage.description.0 = Generate bash/zsh completion script for ${ROOT-COMMAND-NAME:-the root command of this command}. 
fcli.util.auto-complete.generate.usage.description.1 = Run the following command to give `${ROOT-COMMAND-NAME:-$PARENTCOMMAND}` TAB completion in the current shell:
fcli.util.auto-complete.generate.usage.description.2 = \u0020\u0020source <(${PARENT-COMMAND-FULL-NAME:-$PARENTCOMMAND} ${COMMAND-NAME})

# fcli util crypto
fcli.util.crypto.usage.header = Encrypting and decrypting data
fcli.util.crypto.usage.description.0 = These commands allow for encrypting and decrypting string values using fcli built-in encryption mechanism and password. The password can be customized through the FCLI_ENCRYPT_KEY environment variable, obviously the same password should be configured during encryption and decryption.
fcli.util.crypto.usage.description.1 = Note that for now, encryption and decryption is not compatible with Fortify's pwtool utility. These commands are mainly meant to allow encrypted passwords to be stored in fcli configuration files, for example as used by the 'fcli util msp-report' and 'fcli util ncd-report' commands.
fcli.util.crypto.encrypt.usage.header = Encrypt a value.
fcli.util.crypto.encrypt.prompt = Value to encrypt:
fcli.util.crypto.decrypt.usage.header = Decrypt a value.
fcli.util.crypto.decrypt.prompt = Value to decrypt:

# fcli util msp-report
fcli.util.msp-report.usage.header = Configure and generate 'Managed Service Provider' (MSP) reports.
fcli.util.msp-report.generate.usage.header = Generate a 'Managed Service Provider' (MSP) report.
fcli.util.msp-report.generate.usage.description.0 = This command generates a 'Managed Service Provider' (MSP) report based on configuration settings defined in a configuration file. A sample configuration file can be generated using the 'fcli util msp-report generate-config' command.
fcli.util.msp-report.generate.usage.description.1 = \nThe configuration file includes settings for specifying one or more SSC instances from which to load MSP reporting data, and for specifying MSP (contract) information.
fcli.util.msp-report.generate.usage.description.2 = \nThe generated report consists of multiple files, written to either a directory or zip-file. The primary output file is 'summary.txt' that contains various statistics, including the number of application and scan entitlements consumed during the reporting period. Various CSV files providing proof, like the number of entitlements consumed per application, what artifacts were processed, and which artifacts contributed to the entitlement consumption, are generated in the details directory of the report.
fcli.util.msp-report.generate.usage.description.3 = \nThe generated 'checksums.sha256' file can be used to verify integrity of all generated files, using a command like 'sha256sum -c checksums.sha256'.
fcli.util.msp-report.generate.usage.description.4 = \nThis command requires the following SSC application version attributes to be configured in SSC:
fcli.util.msp-report.generate.usage.description.5 = - MSP_License_Type: Required, Single-Select List, Values: Application, Scan, Demo 
fcli.util.msp-report.generate.usage.description.6 = - MSP_End_Customer_Name - Optional (for demo applications), Single Line Text
fcli.util.msp-report.generate.usage.description.7 = - MSP_End_Customer_Location - Optional (for demo applications), Single Line Text
fcli.util.msp-report.generate.usage.description.8 = \nNote that all versions within a single application should provide the same values for these attributes.
fcli.util.msp-report.generate.config = Configuration file; sample can be generated using the 'generate-config' command.
fcli.util.msp-report.generate.start-date = Reporting period start date. Format: yyyy-MM-dd, for example 2023-01-01.
fcli.util.msp-report.generate.end-date = Reporting period start date. Format: yyyy-MM-dd, for example 2023-03-31.
fcli.util.msp-report.generate.confirm = Confirm delete of existing report output location.
fcli.util.msp-report.generate.confirmPrompt = Confirm delete of existing output location %s?
fcli.util.msp-report.generate.processing.app = Processing application %s
fcli.util.msp-report.generate.processing.appversion = Processing application version %s
fcli.util.msp-report.generate.warn.usingUploadDate = WARN: No scan date found for artifact id %s (%s), using upload date instead
fcli.util.msp-report.generate-config.usage.header = Generate a sample configuration file for use by the 'generate' command.
fcli.util.msp-report.generate-config.config = Name of the sample configuration file to be generated.
fcli.util.msp-report.generate-config.confirm = Confirm overwrite of existing configuration file.

# fcli util ncd-report
fcli.util.ncd-report.usage.header = Configure and generate 'Number of Contributing Developers' (NCD) reports.
fcli.util.ncd-report.generate.usage.header = Generate a 'Number of Contributing Developers' (NCD) report.
fcli.util.ncd-report.generate.usage.description.0 = This command generates a 'Number of Contributing Developers' (NCD) report based on configuration settings defined in a configuration file. A sample configuration file can be generated using the 'fcli util ncd-report generate-config' command.\n
fcli.util.ncd-report.generate.usage.description.1 = The configuration file includes rich settings for specifying the source code repositories from which to load contributing developer data (supporting multiple Source Code Management (SCM) systems), and for ignoring and de-duplicating contributing authors. \n
fcli.util.ncd-report.generate.usage.description.2 = The generated report consists of multiple files, written to either a directory or zip-file. The primary output file is 'summary.txt' that contains various statistics, including the de-duplicated count of contributing developers. Various CSV files are generated with supporting proof, like the list of contributing authors, the list of commits that have been processed, and the list of repositories that have been processed.\n 
fcli.util.ncd-report.generate.usage.description.3 = The generated 'checksums.sha256' file can be used to verify integrity of all generated files, using a command like 'sha256sum -c checksums.sha256'.
fcli.util.ncd-report.generate.config = Configuration file; sample can be generated using the 'generate-config' command.
fcli.util.ncd-report.generate.confirm = Confirm delete of existing report output location.
fcli.util.ncd-report.generate.confirmPrompt = Confirm delete of existing output location %s?
fcli.util.ncd-report.generate-config.usage.header = Generate a sample configuration file for use by the 'generate' command.
fcli.util.ncd-report.generate-config.config = Name of the sample configuration file to be generated.
fcli.util.ncd-report.generate-config.confirm = Confirm overwrite of existing configuration file.
fcli.util.ncd-report.loading.commits = Loading commits for repository: %s
fcli.util.ncd-report.loading.branch-commits = Loading commits for branch %s:%s
fcli.util.ncd-report.loading.github-repositories = Loading repositories for GitHub organization: %s
fcli.util.ncd-report.loading.gitlab-repositories = Loading repositories for GitLab group: %s

#################################################################################################################
# The following section lists human-readable header names used by table and tree output formats;
# values may be internationalized. These messages may be prefixed with full or partial command
# prefix. Closest match wins if there are multiple definitions for the same column name, allowing
# subcommands to override header names defined on parent commands
#################################################################################################################
fcli.util.all-commands.list.output.header.aliasesString = Aliases
fcli.util.all-commands.list.output.header.optionsString = Options

#################################################################################################################
# The following are technical properties that shouldn't be internationalized ####################################
#################################################################################################################
fcli.util.all-commands.list.output.table.options = command,hidden,runnable,usageHeader
fcli.util.msp-report.generate.output.table.options = reportPath,summary.errorCount
fcli.util.msp-report.generate-config.output.table.options = path
fcli.util.ncd-report.generate.output.table.options = reportPath,summary.errorCount
fcli.util.ncd-report.generate-config.output.table.options = path


