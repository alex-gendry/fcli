package com.fortify.cli.ssc.rest.bulk;

import java.util.Collection;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fortify.cli.common.json.JsonHelper;
import com.fortify.cli.ssc.rest.helper.SSCInputTransformer;

import kong.unirest.UnirestInstance;

/**
 * This class takes zero or more {@link ISSCEntityEmbedderSupplier} instances
 * as constructor argument(s), storing the {@link ISSCEntityEmbedder} instances
 * generated by these suppliers, to provide the {@link #transformInput(UnirestInstance, JsonNode)}
 * method that builds and executes a bulk request for inserting embedded data
 * into each JSON node contained in the given input.
 *  
 * @author rsenden
 *
 */
public class SSCBulkEmbedder {
    private final Collection<ISSCEntityEmbedder> embedders;
    
    public SSCBulkEmbedder(ISSCEntityEmbedderSupplier... suppliers) {
        this.embedders = suppliers==null ? null : Stream.of(suppliers)
                .map(ISSCEntityEmbedderSupplier::createEntityEmbedder)
                .collect(Collectors.toList());
    }
    
    public JsonNode transformInput(UnirestInstance unirest, JsonNode input) {
        var records = SSCInputTransformer.getDataOrSelf(input);
        if ( records instanceof ObjectNode ) {
            records = JsonHelper.toArrayNode(records);
        }
        if ( embedders!=null ) {
            SSCBulkRequestBuilder builder = new SSCBulkRequestBuilder();
            for ( var record : records ) {
                embedders.forEach(u->u.addEmbedRequests(builder, unirest, record));
            }
            builder.execute(unirest);
        }
        return records;
    }
}
